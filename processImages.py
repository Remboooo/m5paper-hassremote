import math
from typing import List, Tuple
from PIL import Image
from pathlib import Path
import os
import re

source = Path("resources") / "images"
dest = Path("binres") / "images"

header = Path("src") / "generated" / "images.h"

os.makedirs(dest, exist_ok=True)

images: List[Tuple[Path, str, str]] = []

def do_images(base: Path):
    for f in base.iterdir():
        if f.is_dir():
            do_images(f)
        elif f.suffix.lower() in [".png", ".jpg", ".bmp", ".gif"]:
            dest_path = dest / f.relative_to(source).parent / (f.stem + ".bin")
            with open(dest_path, "wb") as wf:
                pixels = bytes(Image.open(f).convert("L").getdata())
                out = bytearray(math.ceil(len(pixels)/2))
                for i in range(0, len(pixels), 2):
                    if i < len(pixels)-1:
                        out[i//2] = 0xFF ^ ((pixels[i]>>4) << 4 | (pixels[i+1]>>4))
                    else:
                        out[i//2] = 0xFF ^ ((pixels[i]>>4) << 4)

                wf.write(out)
            
            symbol_file_part = re.sub(r'[^0-9a-zA-Z]', '_', str(dest_path.relative_to(".")));
            images.append((f, f"_binary_{symbol_file_part}_start", f"_binary_{symbol_file_part}_end"))

do_images(source)

with open(header, "w") as hf:
    hf.writelines([
        "#pragma once\n",
        "/* FILE GENERATED BY processImages.py -- DO NOT EDIT */\n",
    ])
    for f, start_sym, end_sym in images:
        def_name = re.sub(r'[^0-9a-zA-Z]', '_', str(f.relative_to(source).parent / f.stem)).upper()
        hf.writelines([
            "\n",
            f"extern const unsigned char {start_sym}[];\n",
            f"extern const unsigned char {end_sym}[];\n",
            f"#define IMAGE_{def_name}_START {start_sym}\n",
            f"#define IMAGE_{def_name}_END {end_sym}\n",
            f"#define IMAGE_{def_name}_LENGTH ({end_sym} - {start_sym})\n",
        ])